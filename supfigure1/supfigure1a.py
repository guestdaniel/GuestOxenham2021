"""
This script plots estimates of vector strength for each AN model (generated by scripts in
nofigure/vector_strength_curves). Additionally, models of reference data from animals provided by Weiss and Rose (1988)
are plotted alongside the model data.

References:
    Weiss, T. F. and Rose, C. (1988). A comparison of synchronization filters in different auditory receptor organs.
    Hearing Research, 33, 175-180. https://doi.org/10.1016/0378-5955(88)90030-5
"""

import numpy as np
import os, sys
sys.path.append(os.getcwd())
import util as cfg
import matplotlib.pyplot as plt


def lp_filter(freqs, f_c, n):
    """
    Function that calculates the vector strength based on a simple lowpass filter model of phase locking

    Parameters:
        freqs (list, ndarray): array of frequencies, in Hz
        f_c (float): cutoff frequency of the lowpass filter
        n (int): order of the lowpass filter

    Returns:
        G (ndarray): array of vector strength values at the corresponding frequencies
    """
    f_0 = f_c/(2**(1/n) - 1)**(1/2)
    G = 1 / (1 + (freqs/1000 / f_0)**2) ** (n / 2)
    return G


# Construct figure
plt.figure(figsize=(4.5, 3.5))
# Load frequencies from disk
freqs = np.load(os.path.join('nofigure', 'vector_strength_curves', 'freqs.npy'))
# Loop through and plot vector strength estimates for each AN model
for model_name in ['Heinz2001', 'Zilany2014', 'Verhulst2018']:
    # Load vector strength estimates from disk
    vector_strength = np.load(
        os.path.join('nofigure', 'vector_strength_curves', model_name + '.npy'), allow_pickle=True)
    means = np.array([vs[0] for vs in vector_strength])  # the mean is encoded as the first element of each tuple
    errors = np.array([vs[1] for vs in vector_strength])  # the se is encoded as the second element of each tuple
    # Plot
    plt.plot(freqs, means, linewidth=3)
    plt.fill_between(freqs, means - 1.96 * errors, means + 1.96 * errors,
                     color='gray', alpha=0.2)
    plt.xscale('log')
    plt.xlabel('CF (Hz)')
    plt.ylabel('Vector Strength')
    plt.yscale('log')
    plt.ylim((0.01, 1))
    plt.legend(['Heinz et al. (2001)', 'Zilany et al. (2014)', 'Verhulst et al. (2018)'])
# Plot reference animal data
ref_freqs = 10**np.linspace(np.log10(250), np.log10(16000), 1000)
plt.plot(ref_freqs, lp_filter(ref_freqs, 2.5, 7), color='gray', linestyle='dotted')
plt.plot(ref_freqs, lp_filter(ref_freqs, 1.1, 7), color='gray', linestyle='dotted')
# Add labels to reference animal data
plt.text(6500, 0.5, 'Cat', bbox={'edgecolor': 'gray', 'facecolor': 'white'}, color='gray')
plt.plot((4500, 6500), (0.41, 0.55), color='gray')
plt.text(600, 0.2, 'Guinea Pig', bbox={'edgecolor': 'gray', 'facecolor': 'white'}, color='gray')
plt.plot((1050, 2320), (0.205, 0.23), color='gray')
# Handle layout
plt.tight_layout()
# Save figure to disk
plt.savefig('plots/supfig1a.png')
